-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS sets;
DROP TABLE IF EXISTS themes;
DROP TABLE IF EXISTS parts;
DROP VIEW IF EXISTS top_level_themes;
DROP VIEW IF EXISTS sets_years;
DROP TABLE IF EXISTS parts_fts;


-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]
CREATE TABLE sets (
  set_num text,
  name text,
  year integer,
  theme_id integer,
  num_parts integer
);
CREATE TABLE themes (
  id integer,
  name text,
  parent_id integer
);
CREATE TABLE parts (
  part_num text,
  name text,
  part_cat_id integer,
  part_material_id integer
);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]
.import data/sets.csv sets
.import data/themes.csv themes
.import data/parts.csv parts

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
SELECT count(*) FROM sqlite_master WHERE type='table' AND name='sets';
SELECT count(*) FROM sqlite_master WHERE type='table' AND name='parts';
SELECT count(*) FROM sqlite_master WHERE type='table' AND name='themes';
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]
CREATE INDEX sets_index 
ON sets (set_num);
CREATE INDEX parts_index
ON parts (part_num);
CREATE INDEX themes_index
ON themes (id);



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c.i) Create the top_level themes VIEW

-- [insert your SQL statement(s) BELOW this line]
CREATE VIEW top_level_themes AS
SELECT id,name
FROM themes
WHERE parent_id='';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(top_level_themes);
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c.ii) count the top level themes in the top_level_themes view.

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(*) as count FROM top_level_themes;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Finding top level themes with the most sets.

-- [insert your SQL statement(s) BELOW this line]
SELECT top_level_themes.name as themes, count(*) as num_sets
FROM top_level_themes INNER JOIN sets
ON top_level_themes.id = sets.theme_id
GROUP BY theme_id 
HAVING count(*) > 25
ORDER BY count(*) DESC
LIMIT 10;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Calculate a percentage

-- [insert your SQL statement(s) BELOW this line]
SELECT 
  top_level_themes.name as themes, 
  printf("%.2f",(COUNT(*)* 100.00/(SELECT COUNT(*) FROM top_level_themes INNER JOIN sets ON top_level_themes.id = sets.theme_id))) as percentage
FROM top_level_themes INNER JOIN sets 
ON top_level_themes.id = sets.theme_id
GROUP BY theme_id 
HAVING COUNT(*)* 100.00/(SELECT COUNT(*) FROM top_level_themes INNER JOIN sets ON top_level_themes.id = sets.theme_id)>=5.00
ORDER BY COUNT(*)* 100.00/(SELECT COUNT(*) FROM top_level_themes INNER JOIN sets ON top_level_themes.id = sets.theme_id) DESC;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Summarize a sub-theme

-- [insert your SQL statement(s) BELOW this line]
SELECT themes.name as sub_theme, count(*) as num_sets
FROM themes 
INNER JOIN sets
ON themes.id = sets.theme_id
GROUP BY themes.id
HAVING themes.parent_id<>"" and themes.parent_id in (SELECT top_level_themes.id FROM top_level_themes) and num_sets > 5
ORDER BY num_sets DESC, sub_theme ASC;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g.i.) Create the sets VIEW

-- [insert your SQL statement(s) BELOW this line]
CREATE VIEW sets_years AS
SELECT rowid, year, count(*) as sets_count
FROM sets
GROUP BY year;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(sets_years);
SELECT count(*) FROM sqlite_master WHERE type='table' AND name='sets_years';
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g.ii) Find the running total of sets in the Rebrickable database each year

-- [insert your SQL statement(s) BELOW this line]
SELECT yearsets.year as year, SUM(countsets.sets_count) as running_total
FROM sets_years as yearsets, sets_years as countsets
WHERE countsets.year<=yearsets.year
GROUP BY yearsets.year
HAVING yearsets.year>=1980 and yearsets.year<=1989
ORDER BY yearsets.year ASC;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Create the FTS table and import data.

-- [insert your SQL statement(s) BELOW this line]
CREATE VIRTUAL TABLE parts_fts using fts4(
  part_num TEXT,
  name TEXT,
  part_cat_id INTEGER,
  part_material_id INTEGER
 );
.import data/parts.csv parts_fts




-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(parts_fts);
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.i) Count the number of unique parts whose name field begins with the prefix ‘mini’.

-- [insert your SQL statement(s) BELOW this line]


SELECT COUNT(DISTINCT part_num) as count_overview FROM parts_fts
WHERE parts_fts.name  MATCH '^mini*';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.ii) List the part_num’s of the unique parts that contain the terms ‘minidoll’ and ‘boy’ in the name field with no more than 5 intervening terms.

-- [insert your SQL statement(s) BELOW this line]
SELECT COUNT(DISTINCT part_num) as total_boy_minidoll FROM parts_fts
WHERE parts_fts.name  MATCH 'boy NEAR/5 minidoll';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.iii) List the part_num’s of the unique parts that contain the terms ‘minidoll’ and ‘girl’ in the name field with no more than 5 intervening terms.

-- [insert your SQL statement(s) BELOW this line]
SELECT COUNT(DISTINCT part_num) as total_girl_minidoll FROM parts_fts
WHERE parts_fts.name  MATCH 'girl NEAR/5 minidoll';
-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --